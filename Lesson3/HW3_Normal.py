# Задание-1:
# Напишите функцию, возвращающую ряд Фибоначчи с n-элемента до m-элемента.
# Первыми элементами ряда считать цифры 1 1
print('Задача 1')
print('Введите два натуральных числа, причем первое (n) должно быть меньше второго (m):')
#1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711
n = int(input('n='))
m = int(input('m='))
def fibonacci(n, m):

    fibo = [1, 1]

    for i in range(m):

        # print(i)
        fibo.append(fibo[i+1] + fibo[i])
        # print('{}', fibo.format({i}))
    return(fibo[n-1:m])
print(fibonacci(n,m))

# Задача-2:
# Напишите функцию, сортирующую принимаемый список по возрастанию.
# Для сортировки используйте любой алгоритм (например пузырьковый).
# Для решения данной задачи нельзя использовать встроенную функцию и метод sort()

print()
print('Задача 2')

# def sort_to_max(origin_list):
def sort_to_max(origin_list):
    n = len(origin_list)
    print(n)
    for i in range(n-1):
        for j in range(n-i-1):
            if origin_list[j] > origin_list[j+1]:
                origin_list[j], origin_list[j+1] = origin_list[j+1], origin_list[j]
    print(origin_list)
    # return args
sort_to_max([2, 10, -12, 2.5, 20, -11, 4, 4, 0])

# Задача-3:
# Напишите собственную реализацию стандартной функции filter.
# Разумеется, внутри нельзя использовать саму функцию filter.
print()
print('Задача 3')
def my_filter(sp, ust):
    sp_f = []
    for _ in sp:
        if _ == ust:
            sp_f.append(_)
    return(sp_f)
print(my_filter(['1', '2', 3, '4', 3, '5'], 3))


# Задача-4:
# Даны четыре точки А1(х1, у1), А2(x2 ,у2), А3(x3 , у3), А4(х4, у4).
# Определить, будут ли они вершинами параллелограмма.

print()
print('Задача 4')
x1 = 1
y1 = 1
x2 = 2
y2 = 3
x3 = 4
y3 = 4
x4 = 3
y4 = 2
# Вершину А3 поменяли с А2:
# x1 = 1
# y1 = 1
# x2 = 4
# y2 = 4
# x3 = 2
# y3 = 3
# x4 = 3
# y4 = 2
# В параллелограмме стороны попарно равны. Сторона = кв. корень из суммы квадратов разности координат (по т. Пифагора).
# Корень извлекать не будем, т.к. для сравнения достаточно квадратов сторон

if (x2 - x1) ** 2 + (y2 - y1) ** 2 == (x4 - x3) ** 2 + (y4 - y3) ** 2 and (x4 - x1) ** 2 + (y4 - y1) ** 2 == \
    (x3 - x2) ** 2 + (y3 - y2) ** 2:
    print('Это праллелограмм.')
# А если вершины не по порядку А1-А2-А3-А4, а А1-А3-А2-А4 или А1-А2-А4-А3:
elif (x3 - x1) ** 2 + (y3 - y1) ** 2 == (x4 - x2) ** 2 + (y4 - y2) ** 2 and (x3 - x2) ** 2 + (y3 - y2) ** 2 == \
    (x4 - x1) ** 2 + (y4 - y1) ** 2:
    print('Это праллелограмм.')
elif (x2 - x1) ** 2 + (y2 - y1) ** 2 == (x3 - x4) ** 2 + (y3 - y4) ** 2 and (x2 - x4) ** 2 + (y2 - y4) ** 2 == \
    (x3 - x1) ** 2 + (y3 - y1) ** 2:
    print('Это праллелограмм.')
else:
    print('Это не параллелограмм!')
